#include <iostream>
#include <string>
#include <vector>
#include <math.h> 
#include <ros/ros.h>
#include <geometry_msgs/PoseStamped.h>

# define PI           3.14159265358979323846
std::vector<double> Drone_info(4,0);

// Define callbacks
void hasReceivedModelState(const geometry_msgs::PoseStamped::ConstPtr& msg){

	// Obtaining drone info 
  	Drone_info[0] = msg->pose.position.x; 
	Drone_info[1] = msg->pose.position.y;
	Drone_info[2] = msg->pose.position.z;

  return;
}
	
int main(int argc, char** argv){
    
ros::init(argc, argv, "set_waypoints_node");
ros::NodeHandle nh_;
ros::Rate rate(20.0);

double range = 50;
double TargetAltitude = 1.0, TargetYaw = 0.0;
std::vector<double> TargetPoint (2,0), central_point (2,0);

nh_.getParam("/drone_target_points/range",range);
nh_.getParam("/drone_target_points/central_point",central_point);
double quadrant[4][2] = {{central_point[0]-range/2, central_point[1]+range/2},
			{central_point[0]+range/2, central_point[1]+range/2},
			{central_point[0]-range/2, central_point[1]-range/2},
			{central_point[0]+range/2, central_point[1]-range/2}};
int index = 0;
double new_rho, rho = 1000;
for (int i=0; i<4; i++){
	rho_new = math.sqrt((quadrant[i][0]-Drone_info[0])^2+(quadrant[i][1]-Drone_info[1])^2);
	if (rho_new < rho){
		index = i;
		rho = rho_new;	
	} 		
} 

	while (ros::ok()){
	
		

	
   	ros::spinOnce(); // if you were to add a subscription into this application, and did not have ros::spinOnce() here, your callbacks would never get called.
    	rate.sleep();
	}

 return 0;
}
